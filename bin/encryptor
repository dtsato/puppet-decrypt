#!/usr/bin/env ruby

# -*- encoding : utf-8 -*-
require 'base64'
require 'optparse'
require 'encryptor'
require 'io/console'

options = {}
optparse = OptionParser.new do|opts|
  # Set a banner, displayed at the top
  # of the help screen.
  opts.banner = "Usage: encryptor.rb [options] value"

  options[:decrypt] = false
  opts.on( '-d', '--decrypt', 'Decrypt instead of encrypting the value' ) do
    options[:decrypt] = true
  end

  options[:raw] = false
  opts.on( '-r', '--raw', 'Parse/display the value in raw format, instead of an ENC(...) block' ) do
    options[:raw] = true
  end

  # This displays the help screen, all programs are
  # assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

puts "Secret Key:"
secret_key = STDIN.noecho { |stdin| stdin.gets.chomp }

secret_key = Digest::SHA256.hexdigest(secret_key)
value = ARGV[0]

def encrypt(value, secret_key)
  result = value.encrypt(:key => secret_key)
  Base64.strict_encode64(result).strip
end
def decrypt(value, secret_key)
  value = Base64.strict_decode64(value)
  value.decrypt(:key => secret_key)
end

if options[:decrypt]
  unless options[:raw]
    fail("Input is in the wrong format.  Expected and ENC[\"...\"] format") unless value.start_with? "ENC["
    value = value.match(/ENC\[(.*)\]/)[1]
  end
  puts decrypt(value, secret_key)
else
  print "ENC[" unless options[:raw]
  encrypted_value = encrypt(value, secret_key)
  raise "Value can't be encrypted properly" unless decrypt(encrypted_value, secret_key) == value
  print encrypted_value
  print "]" unless options[:raw]
  puts
end
